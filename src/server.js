const express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst path = require('path');\nconst cors = require('cors');\nconst helmet = require('helmet');\nconst compression = require('compression');\nconst rateLimit = require('express-rate-limit');\nrequire('dotenv').config();\n\nconst config = require('./config/config');\nconst logger = require('./utils/logger');\nconst WhatsAppService = require('./services/whatsapp.service');\nconst routes = require('./routes');\nconst { setupSocketEvents } = require('./socket/socketHandler');\n\n// Create Express app\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server, {\n  cors: {\n    origin: \"*\",\n    methods: [\"GET\", \"POST\"]\n  }\n});\n\n// Security middleware\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n      imgSrc: [\"'self'\", \"data:\", \"blob:\"],\n      connectSrc: [\"'self'\", \"ws:\", \"wss:\"]\n    }\n  }\n}));\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: 'Too many requests from this IP, please try again later.'\n});\napp.use('/api/', limiter);\n\n// Middleware\napp.use(compression());\napp.use(cors());\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\napp.use(express.static(path.join(__dirname, '../public')));\n\n// Initialize WhatsApp service\nconst whatsappService = new WhatsAppService(io);\n\n// Make services available to routes\napp.locals.whatsappService = whatsappService;\napp.locals.io = io;\n\n// Routes\napp.use('/api', routes);\n\n// Serve index.html for all other routes\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, '../public/index.html'));\n});\n\n// Setup Socket.IO events\nsetupSocketEvents(io, whatsappService);\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  logger.error('Unhandled error:', err);\n  res.status(500).json({ error: 'Internal server error' });\n});\n\n// Start server\nconst PORT = process.env.PORT || config.server.port;\nserver.listen(PORT, () => {\n  logger.info(`ðŸš€ Server running on port ${PORT}`);\n  logger.info(`ðŸ“± WhatsApp Enhanced Messaging v${require('../package.json').version}`);\n});\n\n// Graceful shutdown\nprocess.on('SIGTERM', () => {\n  logger.info('SIGTERM received, shutting down gracefully');\n  server.close(() => {\n    logger.info('Server closed');\n    if (whatsappService.client) {\n      whatsappService.client.destroy();\n    }\n    process.exit(0);\n  });\n});\n\nmodule.exports = { app, server, io };