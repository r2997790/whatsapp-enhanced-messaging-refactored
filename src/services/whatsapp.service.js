const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');\nconst qrcode = require('qrcode');\nconst fs = require('fs');\nconst path = require('path');\nconst config = require('../config/config');\nconst logger = require('../utils/logger');\nconst { sleep, sanitizePhoneNumber, generateId } = require('../utils/helpers');\n\nclass WhatsAppService {\n  constructor(io) {\n    this.io = io;\n    this.client = null;\n    this.isInitialized = false;\n    this.isConnected = false;\n    this.qrCode = null;\n    this.messagingQueue = [];\n    this.isProcessingQueue = false;\n    this.messagingStats = {\n      sent: 0,\n      failed: 0,\n      total: 0,\n      currentCampaign: null\n    };\n\n    this.initialize();\n  }\n\n  async initialize() {\n    try {\n      logger.info('Initializing WhatsApp client...');\n      \n      // Ensure sessions directory exists\n      const sessionsPath = config.whatsapp.session.path;\n      if (!fs.existsSync(sessionsPath)) {\n        fs.mkdirSync(sessionsPath, { recursive: true });\n      }\n\n      this.client = new Client({\n        authStrategy: new LocalAuth({\n          clientId: config.whatsapp.session.name,\n          dataPath: sessionsPath\n        }),\n        puppeteer: config.whatsapp.puppeteer\n      });\n\n      this.setupEventListeners();\n      await this.client.initialize();\n      \n    } catch (error) {\n      logger.error('Failed to initialize WhatsApp client:', error);\n      this.io.emit('whatsapp_error', { \n        error: 'Failed to initialize WhatsApp client',\n        details: error.message \n      });\n    }\n  }\n\n  setupEventListeners() {\n    this.client.on('qr', async (qr) => {\n      try {\n        logger.info('QR Code received');\n        this.qrCode = await qrcode.toDataURL(qr);\n        this.io.emit('qr_code', { qrCode: this.qrCode });\n      } catch (error) {\n        logger.error('Error generating QR code:', error);\n      }\n    });\n\n    this.client.on('ready', () => {\n      logger.info('WhatsApp client is ready!');\n      this.isInitialized = true;\n      this.isConnected = true;\n      this.qrCode = null;\n      this.io.emit('whatsapp_ready', { \n        status: 'connected',\n        message: 'WhatsApp client is ready!'\n      });\n    });\n\n    this.client.on('authenticated', () => {\n      logger.info('WhatsApp client authenticated');\n      this.io.emit('whatsapp_authenticated');\n    });\n\n    this.client.on('auth_failure', (msg) => {\n      logger.error('Authentication failed:', msg);\n      this.isConnected = false;\n      this.io.emit('whatsapp_auth_failure', { error: msg });\n    });\n\n    this.client.on('disconnected', (reason) => {\n      logger.warn('WhatsApp client disconnected:', reason);\n      this.isConnected = false;\n      this.isInitialized = false;\n      this.io.emit('whatsapp_disconnected', { reason });\n      \n      // Attempt to reconnect after 5 seconds\n      setTimeout(() => {\n        logger.info('Attempting to reconnect...');\n        this.initialize();\n      }, 5000);\n    });\n\n    this.client.on('message', (message) => {\n      logger.debug('Received message:', {\n        from: message.from,\n        body: message.body?.substring(0, 50)\n      });\n    });\n  }\n\n  async sendMessage(phoneNumber, message, media = null) {\n    try {\n      if (!this.isConnected) {\n        throw new Error('WhatsApp client is not connected');\n      }\n\n      const sanitizedNumber = sanitizePhoneNumber(phoneNumber);\n      const chatId = `${sanitizedNumber}@c.us`;\n\n      // Check if number exists on WhatsApp\n      const isRegistered = await this.client.isRegisteredUser(chatId);\n      if (!isRegistered) {\n        throw new Error(`Number ${phoneNumber} is not registered on WhatsApp`);\n      }\n\n      let result;\n      if (media) {\n        const messageMedia = MessageMedia.fromFilePath(media.path);\n        result = await this.client.sendMessage(chatId, messageMedia, { caption: message });\n      } else {\n        result = await this.client.sendMessage(chatId, message);\n      }\n\n      logger.info(`Message sent successfully to ${phoneNumber}`);\n      return { success: true, messageId: result.id._serialized };\n      \n    } catch (error) {\n      logger.error(`Failed to send message to ${phoneNumber}:`, error);\n      throw error;\n    }\n  }\n\n  async addToQueue(phoneNumber, message, media = null, campaignId = null) {\n    const messageItem = {\n      id: generateId(),\n      phoneNumber: sanitizePhoneNumber(phoneNumber),\n      message,\n      media,\n      campaignId,\n      timestamp: new Date(),\n      retries: 0\n    };\n\n    this.messagingQueue.push(messageItem);\n    logger.debug(`Added message to queue: ${phoneNumber}`);\n    \n    if (!this.isProcessingQueue) {\n      this.processQueue();\n    }\n  }\n\n  async processQueue() {\n    if (this.isProcessingQueue || this.messagingQueue.length === 0) {\n      return;\n    }\n\n    this.isProcessingQueue = true;\n    logger.info(`Starting queue processing with ${this.messagingQueue.length} messages`);\n    \n    while (this.messagingQueue.length > 0) {\n      const messageItem = this.messagingQueue.shift();\n      \n      try {\n        await this.sendMessage(messageItem.phoneNumber, messageItem.message, messageItem.media);\n        \n        this.messagingStats.sent++;\n        this.io.emit('message_sent', {\n          phoneNumber: messageItem.phoneNumber,\n          messageId: messageItem.id,\n          campaignId: messageItem.campaignId\n        });\n        \n        logger.info(`Message sent to ${messageItem.phoneNumber} (${this.messagingStats.sent}/${this.messagingStats.total})`);\n        \n      } catch (error) {\n        logger.error(`Failed to send message to ${messageItem.phoneNumber}:`, error);\n        \n        // Retry logic\n        if (messageItem.retries < config.whatsapp.messaging.maxRetries) {\n          messageItem.retries++;\n          this.messagingQueue.push(messageItem);\n          logger.info(`Retrying message to ${messageItem.phoneNumber} (attempt ${messageItem.retries})`);\n        } else {\n          this.messagingStats.failed++;\n          this.io.emit('message_failed', {\n            phoneNumber: messageItem.phoneNumber,\n            messageId: messageItem.id,\n            error: error.message,\n            campaignId: messageItem.campaignId\n          });\n        }\n      }\n      \n      // Update stats\n      this.io.emit('messaging_stats', this.messagingStats);\n      \n      // Delay between messages\n      const delay = Math.random() * \n        (config.whatsapp.messaging.delay.max - config.whatsapp.messaging.delay.min) + \n        config.whatsapp.messaging.delay.min;\n      \n      await sleep(delay);\n    }\n    \n    this.isProcessingQueue = false;\n    logger.info('Queue processing completed');\n    this.io.emit('queue_completed', this.messagingStats);\n  }\n\n  async bulkMessage(contacts, message, media = null, campaignId = null) {\n    try {\n      if (!this.isConnected) {\n        throw new Error('WhatsApp client is not connected');\n      }\n\n      this.messagingStats = {\n        sent: 0,\n        failed: 0,\n        total: contacts.length,\n        currentCampaign: campaignId\n      };\n\n      logger.info(`Starting bulk message campaign with ${contacts.length} contacts`);\n      this.io.emit('bulk_message_started', {\n        total: contacts.length,\n        campaignId\n      });\n\n      // Add all messages to queue\n      for (const contact of contacts) {\n        await this.addToQueue(contact.phone, message, media, campaignId);\n      }\n\n      return {\n        success: true,\n        message: `Bulk message campaign started with ${contacts.length} contacts`,\n        campaignId\n      };\n\n    } catch (error) {\n      logger.error('Bulk message error:', error);\n      throw error;\n    }\n  }\n\n  getStatus() {\n    return {\n      isInitialized: this.isInitialized,\n      isConnected: this.isConnected,\n      qrCode: this.qrCode,\n      queueLength: this.messagingQueue.length,\n      isProcessingQueue: this.isProcessingQueue,\n      stats: this.messagingStats\n    };\n  }\n\n  async getChats() {\n    try {\n      if (!this.isConnected) {\n        throw new Error('WhatsApp client is not connected');\n      }\n      \n      const chats = await this.client.getChats();\n      return chats.map(chat => ({\n        id: chat.id._serialized,\n        name: chat.name,\n        isGroup: chat.isGroup,\n        unreadCount: chat.unreadCount,\n        lastMessage: chat.lastMessage?.body?.substring(0, 50)\n      }));\n    } catch (error) {\n      logger.error('Error getting chats:', error);\n      throw error;\n    }\n  }\n\n  async logout() {\n    try {\n      if (this.client) {\n        await this.client.logout();\n        logger.info('WhatsApp client logged out');\n      }\n    } catch (error) {\n      logger.error('Error during logout:', error);\n      throw error;\n    }\n  }\n\n  async destroy() {\n    try {\n      if (this.client) {\n        await this.client.destroy();\n        logger.info('WhatsApp client destroyed');\n      }\n    } catch (error) {\n      logger.error('Error destroying client:', error);\n      throw error;\n    }\n  }\n}\n\nmodule.exports = WhatsAppService;