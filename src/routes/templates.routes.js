const express = require('express');\nconst logger = require('../utils/logger');\nconst TemplatesService = require('../services/templates.service');\n\nconst router = express.Router();\nconst templatesService = new TemplatesService();\n\n// Get all templates\nrouter.get('/', async (req, res) => {\n  try {\n    const { search, category, tags } = req.query;\n    const filters = {};\n    \n    if (search) filters.search = search;\n    if (category) filters.category = category;\n    if (tags) filters.tags = tags.split(',').map(t => t.trim());\n    \n    const templates = await templatesService.getTemplates(filters);\n    res.json({ success: true, data: templates });\n  } catch (error) {\n    logger.error('Error getting templates:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\n// Get single template\nrouter.get('/:id', async (req, res) => {\n  try {\n    const template = await templatesService.getTemplate(req.params.id);\n    res.json({ success: true, data: template });\n  } catch (error) {\n    logger.error('Error getting template:', error);\n    res.status(404).json({ success: false, error: error.message });\n  }\n});\n\n// Create new template\nrouter.post('/', async (req, res) => {\n  try {\n    const template = await templatesService.createTemplate(req.body);\n    res.status(201).json({ success: true, data: template });\n  } catch (error) {\n    logger.error('Error creating template:', error);\n    res.status(400).json({ success: false, error: error.message });\n  }\n});\n\n// Update template\nrouter.put('/:id', async (req, res) => {\n  try {\n    const template = await templatesService.updateTemplate(req.params.id, req.body);\n    res.json({ success: true, data: template });\n  } catch (error) {\n    logger.error('Error updating template:', error);\n    res.status(400).json({ success: false, error: error.message });\n  }\n});\n\n// Delete template\nrouter.delete('/:id', async (req, res) => {\n  try {\n    await templatesService.deleteTemplate(req.params.id);\n    res.json({ success: true, message: 'Template deleted successfully' });\n  } catch (error) {\n    logger.error('Error deleting template:', error);\n    res.status(404).json({ success: false, error: error.message });\n  }\n});\n\n// Render template with variables\nrouter.post('/:id/render', async (req, res) => {\n  try {\n    const { variables } = req.body;\n    const result = await templatesService.renderTemplate(req.params.id, variables || {});\n    res.json({ success: true, data: result });\n  } catch (error) {\n    logger.error('Error rendering template:', error);\n    res.status(400).json({ success: false, error: error.message });\n  }\n});\n\n// Duplicate template\nrouter.post('/:id/duplicate', async (req, res) => {\n  try {\n    const { newName } = req.body;\n    const template = await templatesService.duplicateTemplate(req.params.id, newName);\n    res.status(201).json({ success: true, data: template });\n  } catch (error) {\n    logger.error('Error duplicating template:', error);\n    res.status(400).json({ success: false, error: error.message });\n  }\n});\n\n// Get template categories\nrouter.get('/meta/categories', async (req, res) => {\n  try {\n    const categories = await templatesService.getCategories();\n    res.json({ success: true, data: categories });\n  } catch (error) {\n    logger.error('Error getting template categories:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\n// Get template tags\nrouter.get('/meta/tags', async (req, res) => {\n  try {\n    const tags = await templatesService.getTags();\n    res.json({ success: true, data: tags });\n  } catch (error) {\n    logger.error('Error getting template tags:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\n// Get template statistics\nrouter.get('/meta/stats', async (req, res) => {\n  try {\n    const stats = templatesService.getStats();\n    res.json({ success: true, data: stats });\n  } catch (error) {\n    logger.error('Error getting template stats:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\n// Preview template variables\nrouter.post('/preview', async (req, res) => {\n  try {\n    const { content } = req.body;\n    \n    if (!content) {\n      return res.status(400).json({ \n        success: false, \n        error: 'Content is required' \n      });\n    }\n    \n    const variables = templatesService.extractVariables(content);\n    res.json({ success: true, data: { variables } });\n  } catch (error) {\n    logger.error('Error previewing template:', error);\n    res.status(400).json({ success: false, error: error.message });\n  }\n});\n\n// Bulk operations\nrouter.post('/bulk/delete', async (req, res) => {\n  try {\n    const { templateIds } = req.body;\n    \n    if (!templateIds || !Array.isArray(templateIds)) {\n      return res.status(400).json({ \n        success: false, \n        error: 'Template IDs array is required' \n      });\n    }\n    \n    const results = {\n      deleted: 0,\n      errors: []\n    };\n    \n    for (const templateId of templateIds) {\n      try {\n        await templatesService.deleteTemplate(templateId);\n        results.deleted++;\n      } catch (error) {\n        results.errors.push({\n          templateId,\n          error: error.message\n        });\n      }\n    }\n    \n    res.json({ success: true, data: results });\n  } catch (error) {\n    logger.error('Error bulk deleting templates:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\n// Update multiple templates' category\nrouter.post('/bulk/update-category', async (req, res) => {\n  try {\n    const { templateIds, category } = req.body;\n    \n    if (!templateIds || !Array.isArray(templateIds) || !category) {\n      return res.status(400).json({ \n        success: false, \n        error: 'Template IDs array and category are required' \n      });\n    }\n    \n    const results = {\n      updated: 0,\n      errors: []\n    };\n    \n    for (const templateId of templateIds) {\n      try {\n        await templatesService.updateTemplate(templateId, { category });\n        results.updated++;\n      } catch (error) {\n        results.errors.push({\n          templateId,\n          error: error.message\n        });\n      }\n    }\n    \n    res.json({ success: true, data: results });\n  } catch (error) {\n    logger.error('Error bulk updating template categories:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\n// Export templates\nrouter.get('/export/json', async (req, res) => {\n  try {\n    const templates = await templatesService.getTemplates();\n    \n    const exportData = {\n      templates: templates.map(t => ({\n        name: t.name,\n        content: t.content,\n        category: t.category,\n        tags: t.tags,\n        variables: t.variables\n      })),\n      exportedAt: new Date().toISOString(),\n      total: templates.length\n    };\n    \n    res.setHeader('Content-Type', 'application/json');\n    res.setHeader('Content-Disposition', 'attachment; filename=templates.json');\n    res.json({ success: true, data: exportData });\n  } catch (error) {\n    logger.error('Error exporting templates:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\n// Import templates\nrouter.post('/import', async (req, res) => {\n  try {\n    const { templates, overwrite = false } = req.body;\n    \n    if (!templates || !Array.isArray(templates)) {\n      return res.status(400).json({ \n        success: false, \n        error: 'Templates array is required' \n      });\n    }\n    \n    const results = {\n      imported: 0,\n      skipped: 0,\n      errors: []\n    };\n    \n    for (const templateData of templates) {\n      try {\n        // Check if template exists\n        const existingTemplates = await templatesService.getTemplates({ \n          search: templateData.name \n        });\n        \n        const existingTemplate = existingTemplates.find(t => \n          t.name.toLowerCase() === templateData.name.toLowerCase()\n        );\n        \n        if (existingTemplate && !overwrite) {\n          results.skipped++;\n          continue;\n        }\n        \n        if (existingTemplate && overwrite) {\n          await templatesService.updateTemplate(existingTemplate.id, templateData);\n        } else {\n          await templatesService.createTemplate(templateData);\n        }\n        \n        results.imported++;\n      } catch (error) {\n        results.errors.push({\n          template: templateData.name,\n          error: error.message\n        });\n      }\n    }\n    \n    res.json({ success: true, data: results });\n  } catch (error) {\n    logger.error('Error importing templates:', error);\n    res.status(400).json({ success: false, error: error.message });\n  }\n});\n\nmodule.exports = router;