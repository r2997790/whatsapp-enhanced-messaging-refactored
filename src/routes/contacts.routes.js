const express = require('express');\nconst logger = require('../utils/logger');\nconst ContactsService = require('../services/contacts.service');\n\nconst router = express.Router();\nconst contactsService = new ContactsService();\n\n// Get all contacts\nrouter.get('/', async (req, res) => {\n  try {\n    const { search, groupId, tags } = req.query;\n    const filters = {};\n    \n    if (search) filters.search = search;\n    if (groupId) filters.groupId = groupId;\n    if (tags) filters.tags = tags.split(',').map(t => t.trim());\n    \n    const contacts = await contactsService.getContacts(filters);\n    res.json({ success: true, data: contacts });\n  } catch (error) {\n    logger.error('Error getting contacts:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\n// Get single contact\nrouter.get('/:id', async (req, res) => {\n  try {\n    const contact = await contactsService.getContact(req.params.id);\n    res.json({ success: true, data: contact });\n  } catch (error) {\n    logger.error('Error getting contact:', error);\n    res.status(404).json({ success: false, error: error.message });\n  }\n});\n\n// Create new contact\nrouter.post('/', async (req, res) => {\n  try {\n    const contact = await contactsService.addContact(req.body);\n    res.status(201).json({ success: true, data: contact });\n  } catch (error) {\n    logger.error('Error creating contact:', error);\n    res.status(400).json({ success: false, error: error.message });\n  }\n});\n\n// Update contact\nrouter.put('/:id', async (req, res) => {\n  try {\n    const contact = await contactsService.updateContact(req.params.id, req.body);\n    res.json({ success: true, data: contact });\n  } catch (error) {\n    logger.error('Error updating contact:', error);\n    res.status(400).json({ success: false, error: error.message });\n  }\n});\n\n// Delete contact\nrouter.delete('/:id', async (req, res) => {\n  try {\n    await contactsService.deleteContact(req.params.id);\n    res.json({ success: true, message: 'Contact deleted successfully' });\n  } catch (error) {\n    logger.error('Error deleting contact:', error);\n    res.status(404).json({ success: false, error: error.message });\n  }\n});\n\n// Import contacts\nrouter.post('/import', async (req, res) => {\n  try {\n    const { contacts } = req.body;\n    \n    if (!contacts || !Array.isArray(contacts)) {\n      return res.status(400).json({ \n        success: false, \n        error: 'Contacts array is required' \n      });\n    }\n    \n    const result = await contactsService.importContacts(contacts);\n    res.json({ success: true, data: result });\n  } catch (error) {\n    logger.error('Error importing contacts:', error);\n    res.status(400).json({ success: false, error: error.message });\n  }\n});\n\n// Export contacts\nrouter.get('/export/:format', async (req, res) => {\n  try {\n    const { format } = req.params;\n    \n    if (!['json', 'csv'].includes(format)) {\n      return res.status(400).json({ \n        success: false, \n        error: 'Format must be json or csv' \n      });\n    }\n    \n    const result = await contactsService.exportContacts(format);\n    \n    if (format === 'csv') {\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', 'attachment; filename=contacts.csv');\n      res.send(result.csv);\n    } else {\n      res.json({ success: true, data: result });\n    }\n  } catch (error) {\n    logger.error('Error exporting contacts:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\n// Get contacts statistics\nrouter.get('/stats', async (req, res) => {\n  try {\n    const stats = contactsService.getStats();\n    res.json({ success: true, data: stats });\n  } catch (error) {\n    logger.error('Error getting contacts stats:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\n// Bulk operations\nrouter.post('/bulk/delete', async (req, res) => {\n  try {\n    const { contactIds } = req.body;\n    \n    if (!contactIds || !Array.isArray(contactIds)) {\n      return res.status(400).json({ \n        success: false, \n        error: 'Contact IDs array is required' \n      });\n    }\n    \n    const results = {\n      deleted: 0,\n      errors: []\n    };\n    \n    for (const contactId of contactIds) {\n      try {\n        await contactsService.deleteContact(contactId);\n        results.deleted++;\n      } catch (error) {\n        results.errors.push({\n          contactId,\n          error: error.message\n        });\n      }\n    }\n    \n    res.json({ success: true, data: results });\n  } catch (error) {\n    logger.error('Error bulk deleting contacts:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\n// Update multiple contacts' tags\nrouter.post('/bulk/update-tags', async (req, res) => {\n  try {\n    const { contactIds, tags, action } = req.body; // action: 'add', 'remove', 'replace'\n    \n    if (!contactIds || !Array.isArray(contactIds) || !tags || !Array.isArray(tags)) {\n      return res.status(400).json({ \n        success: false, \n        error: 'Contact IDs and tags arrays are required' \n      });\n    }\n    \n    if (!['add', 'remove', 'replace'].includes(action)) {\n      return res.status(400).json({ \n        success: false, \n        error: 'Action must be add, remove, or replace' \n      });\n    }\n    \n    const results = {\n      updated: 0,\n      errors: []\n    };\n    \n    for (const contactId of contactIds) {\n      try {\n        const contact = await contactsService.getContact(contactId);\n        let newTags = [...contact.tags];\n        \n        if (action === 'add') {\n          newTags = [...new Set([...newTags, ...tags])];\n        } else if (action === 'remove') {\n          newTags = newTags.filter(tag => !tags.includes(tag));\n        } else if (action === 'replace') {\n          newTags = tags;\n        }\n        \n        await contactsService.updateContact(contactId, { tags: newTags });\n        results.updated++;\n      } catch (error) {\n        results.errors.push({\n          contactId,\n          error: error.message\n        });\n      }\n    }\n    \n    res.json({ success: true, data: results });\n  } catch (error) {\n    logger.error('Error bulk updating contact tags:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\n// Search contacts by phone number\nrouter.get('/search/phone/:phoneNumber', async (req, res) => {\n  try {\n    const { phoneNumber } = req.params;\n    const contacts = await contactsService.getContacts({ search: phoneNumber });\n    \n    const exactMatch = contacts.find(c => c.phone === phoneNumber);\n    \n    res.json({ \n      success: true, \n      data: {\n        exactMatch,\n        partialMatches: contacts.filter(c => c.phone !== phoneNumber)\n      }\n    });\n  } catch (error) {\n    logger.error('Error searching contacts by phone:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\nmodule.exports = router;