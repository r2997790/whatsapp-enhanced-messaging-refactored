const express = require('express');\nconst multer = require('multer');\nconst csv = require('csv-parser');\nconst fs = require('fs');\nconst path = require('path');\nconst logger = require('../utils/logger');\nconst ContactsService = require('../services/contacts.service');\nconst { parseCSV, isValidPhoneNumber } = require('../utils/helpers');\nconst config = require('../config/config');\n\nconst router = express.Router();\nconst contactsService = new ContactsService();\n\n// Configure multer for file uploads\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    const uploadDir = config.upload.destination;\n    if (!fs.existsSync(uploadDir)) {\n      fs.mkdirSync(uploadDir, { recursive: true });\n    }\n    cb(null, uploadDir);\n  },\n  filename: (req, file, cb) => {\n    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));\n  }\n});\n\nconst upload = multer({\n  storage: storage,\n  limits: {\n    fileSize: 10 * 1024 * 1024 // 10MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    // Check file type\n    if (config.upload.allowedTypes.includes(file.mimetype) || \n        file.originalname.toLowerCase().endsWith('.csv')) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type. Only CSV files are allowed.'));\n    }\n  }\n});\n\n// Upload and parse CSV file\nrouter.post('/csv', upload.single('file'), async (req, res) => {\n  try {\n    if (!req.file) {\n      return res.status(400).json({\n        success: false,\n        error: 'No file uploaded'\n      });\n    }\n\n    const filePath = req.file.path;\n    const contacts = [];\n    const errors = [];\n    let lineNumber = 1;\n\n    // Read and parse CSV file\n    const fileContent = fs.readFileSync(filePath, 'utf8');\n    const parsedData = parseCSV(fileContent);\n    \n    for (const row of parsedData) {\n      lineNumber++;\n      \n      try {\n        // Extract contact information from CSV row\n        const contact = {\n          name: row.name || row.Name || row.full_name || row['Full Name'] || '',\n          phone: row.phone || row.Phone || row.mobile || row.Mobile || row.number || row.Number || '',\n          email: row.email || row.Email || row.mail || row.Mail || '',\n          tags: [],\n          groupIds: []\n        };\n\n        // Parse tags if present\n        const tagsField = row.tags || row.Tags || row.tag || row.Tag || '';\n        if (tagsField) {\n          contact.tags = tagsField.split(/[;,|]/).map(tag => tag.trim()).filter(tag => tag);\n        }\n\n        // Validate required fields\n        if (!contact.name || !contact.phone) {\n          errors.push({\n            line: lineNumber,\n            error: 'Name and phone are required',\n            data: row\n          });\n          continue;\n        }\n\n        // Validate phone number\n        if (!isValidPhoneNumber(contact.phone)) {\n          errors.push({\n            line: lineNumber,\n            error: 'Invalid phone number format',\n            data: row\n          });\n          continue;\n        }\n\n        contacts.push(contact);\n      } catch (error) {\n        errors.push({\n          line: lineNumber,\n          error: error.message,\n          data: row\n        });\n      }\n    }\n\n    // Clean up uploaded file\n    fs.unlinkSync(filePath);\n\n    res.json({\n      success: true,\n      data: {\n        contacts,\n        totalParsed: contacts.length,\n        totalErrors: errors.length,\n        errors: errors.slice(0, 10), // Return first 10 errors\n        hasMoreErrors: errors.length > 10\n      }\n    });\n\n  } catch (error) {\n    logger.error('Error processing CSV upload:', error);\n    \n    // Clean up file if it exists\n    if (req.file && fs.existsSync(req.file.path)) {\n      fs.unlinkSync(req.file.path);\n    }\n    \n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// Upload and import CSV contacts directly\nrouter.post('/csv/import', upload.single('file'), async (req, res) => {\n  try {\n    if (!req.file) {\n      return res.status(400).json({\n        success: false,\n        error: 'No file uploaded'\n      });\n    }\n\n    const filePath = req.file.path;\n    const contacts = [];\n    const parseErrors = [];\n    let lineNumber = 1;\n\n    // Read and parse CSV file\n    const fileContent = fs.readFileSync(filePath, 'utf8');\n    const parsedData = parseCSV(fileContent);\n    \n    for (const row of parsedData) {\n      lineNumber++;\n      \n      try {\n        // Extract contact information from CSV row\n        const contact = {\n          name: row.name || row.Name || row.full_name || row['Full Name'] || '',\n          phone: row.phone || row.Phone || row.mobile || row.Mobile || row.number || row.Number || '',\n          email: row.email || row.Email || row.mail || row.Mail || '',\n          tags: [],\n          groupIds: []\n        };\n\n        // Parse tags if present\n        const tagsField = row.tags || row.Tags || row.tag || row.Tag || '';\n        if (tagsField) {\n          contact.tags = tagsField.split(/[;,|]/).map(tag => tag.trim()).filter(tag => tag);\n        }\n\n        // Validate required fields\n        if (!contact.name || !contact.phone) {\n          parseErrors.push({\n            line: lineNumber,\n            error: 'Name and phone are required',\n            data: row\n          });\n          continue;\n        }\n\n        // Validate phone number\n        if (!isValidPhoneNumber(contact.phone)) {\n          parseErrors.push({\n            line: lineNumber,\n            error: 'Invalid phone number format',\n            data: row\n          });\n          continue;\n        }\n\n        contacts.push(contact);\n      } catch (error) {\n        parseErrors.push({\n          line: lineNumber,\n          error: error.message,\n          data: row\n        });\n      }\n    }\n\n    // Import contacts to database\n    const importResult = await contactsService.importContacts(contacts);\n\n    // Clean up uploaded file\n    fs.unlinkSync(filePath);\n\n    res.json({\n      success: true,\n      data: {\n        parseErrors,\n        importResult,\n        totalProcessed: contacts.length,\n        summary: {\n          parsed: contacts.length,\n          parseErrors: parseErrors.length,\n          imported: importResult.imported,\n          skipped: importResult.skipped,\n          importErrors: importResult.errors.length\n        }\n      }\n    });\n\n  } catch (error) {\n    logger.error('Error importing CSV contacts:', error);\n    \n    // Clean up file if it exists\n    if (req.file && fs.existsSync(req.file.path)) {\n      fs.unlinkSync(req.file.path);\n    }\n    \n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// Get upload template (CSV format example)\nrouter.get('/template/csv', (req, res) => {\n  try {\n    const csvTemplate = [\n      'name,phone,email,tags',\n      'John Doe,+1234567890,john@example.com,customer;vip',\n      'Jane Smith,+0987654321,jane@example.com,lead;prospect',\n      'Bob Johnson,+1122334455,bob@example.com,customer'\n    ].join('\\n');\n\n    res.setHeader('Content-Type', 'text/csv');\n    res.setHeader('Content-Disposition', 'attachment; filename=contacts-template.csv');\n    res.send(csvTemplate);\n  } catch (error) {\n    logger.error('Error generating CSV template:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// Upload media files (for future use with WhatsApp media messages)\nrouter.post('/media', upload.single('media'), async (req, res) => {\n  try {\n    if (!req.file) {\n      return res.status(400).json({\n        success: false,\n        error: 'No file uploaded'\n      });\n    }\n\n    const fileInfo = {\n      filename: req.file.filename,\n      originalname: req.file.originalname,\n      mimetype: req.file.mimetype,\n      size: req.file.size,\n      path: req.file.path,\n      uploadedAt: new Date().toISOString()\n    };\n\n    res.json({\n      success: true,\n      data: fileInfo\n    });\n  } catch (error) {\n    logger.error('Error uploading media file:', error);\n    \n    // Clean up file if it exists\n    if (req.file && fs.existsSync(req.file.path)) {\n      fs.unlinkSync(req.file.path);\n    }\n    \n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// Delete uploaded file\nrouter.delete('/file/:filename', (req, res) => {\n  try {\n    const { filename } = req.params;\n    const filePath = path.join(config.upload.destination, filename);\n    \n    if (fs.existsSync(filePath)) {\n      fs.unlinkSync(filePath);\n      res.json({\n        success: true,\n        message: 'File deleted successfully'\n      });\n    } else {\n      res.status(404).json({\n        success: false,\n        error: 'File not found'\n      });\n    }\n  } catch (error) {\n    logger.error('Error deleting file:', error);\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n// Error handler for multer\nrouter.use((error, req, res, next) => {\n  if (error instanceof multer.MulterError) {\n    if (error.code === 'LIMIT_FILE_SIZE') {\n      return res.status(400).json({\n        success: false,\n        error: 'File too large. Maximum size is 10MB.'\n      });\n    }\n  }\n  \n  res.status(400).json({\n    success: false,\n    error: error.message\n  });\n});\n\nmodule.exports = router;"