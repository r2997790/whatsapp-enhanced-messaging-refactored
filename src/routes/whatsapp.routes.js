const express = require('express');\nconst logger = require('../utils/logger');\nconst ContactsService = require('../services/contacts.service');\nconst TemplatesService = require('../services/templates.service');\nconst { generateId } = require('../utils/helpers');\n\nconst router = express.Router();\n\n// Initialize services\nconst contactsService = new ContactsService();\nconst templatesService = new TemplatesService();\n\n// Get WhatsApp status\nrouter.get('/status', async (req, res) => {\n  try {\n    const whatsappService = req.app.locals.whatsappService;\n    const status = whatsappService.getStatus();\n    res.json({ success: true, data: status });\n  } catch (error) {\n    logger.error('Error getting WhatsApp status:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\n// Send single message\nrouter.post('/send-message', async (req, res) => {\n  try {\n    const { phoneNumber, message, templateId, variables } = req.body;\n    const whatsappService = req.app.locals.whatsappService;\n\n    if (!phoneNumber || (!message && !templateId)) {\n      return res.status(400).json({ \n        success: false, \n        error: 'Phone number and message (or templateId) are required' \n      });\n    }\n\n    let finalMessage = message;\n    \n    // If using template, render it\n    if (templateId) {\n      const rendered = await templatesService.renderTemplate(templateId, variables || {});\n      finalMessage = rendered.content;\n    }\n\n    const result = await whatsappService.sendMessage(phoneNumber, finalMessage);\n    \n    // Update contact message stats if contact exists\n    try {\n      const contacts = await contactsService.getContacts({ search: phoneNumber });\n      if (contacts.length > 0) {\n        await contactsService.updateMessageStats(contacts[0].id);\n      }\n    } catch (error) {\n      logger.warn('Could not update contact stats:', error);\n    }\n\n    res.json({ success: true, data: result });\n  } catch (error) {\n    logger.error('Error sending message:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\n// Send bulk messages\nrouter.post('/send-bulk', async (req, res) => {\n  try {\n    const { contacts, message, templateId, variables, campaignName } = req.body;\n    const whatsappService = req.app.locals.whatsappService;\n\n    if (!contacts || !contacts.length || (!message && !templateId)) {\n      return res.status(400).json({ \n        success: false, \n        error: 'Contacts and message (or templateId) are required' \n      });\n    }\n\n    const campaignId = generateId();\n    let finalMessage = message;\n    \n    // If using template, render it\n    if (templateId) {\n      const rendered = await templatesService.renderTemplate(templateId, variables || {});\n      finalMessage = rendered.content;\n    }\n\n    const result = await whatsappService.bulkMessage(contacts, finalMessage, null, campaignId);\n    \n    res.json({ \n      success: true, \n      data: { \n        ...result, \n        campaignId,\n        campaignName: campaignName || `Campaign ${campaignId}`\n      } \n    });\n  } catch (error) {\n    logger.error('Error sending bulk messages:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\n// Send messages to contact groups\nrouter.post('/send-to-groups', async (req, res) => {\n  try {\n    const { groupIds, message, templateId, variables, campaignName } = req.body;\n    const whatsappService = req.app.locals.whatsappService;\n\n    if (!groupIds || !groupIds.length || (!message && !templateId)) {\n      return res.status(400).json({ \n        success: false, \n        error: 'Group IDs and message (or templateId) are required' \n      });\n    }\n\n    // Get all contacts from specified groups\n    let allContacts = [];\n    for (const groupId of groupIds) {\n      const groupContacts = await contactsService.getContacts({ groupId });\n      allContacts = allContacts.concat(groupContacts);\n    }\n\n    // Remove duplicates\n    const uniqueContacts = allContacts.filter((contact, index, self) => \n      index === self.findIndex(c => c.phone === contact.phone)\n    );\n\n    if (uniqueContacts.length === 0) {\n      return res.status(400).json({ \n        success: false, \n        error: 'No contacts found in specified groups' \n      });\n    }\n\n    const campaignId = generateId();\n    let finalMessage = message;\n    \n    // If using template, render it\n    if (templateId) {\n      const rendered = await templatesService.renderTemplate(templateId, variables || {});\n      finalMessage = rendered.content;\n    }\n\n    const result = await whatsappService.bulkMessage(uniqueContacts, finalMessage, null, campaignId);\n    \n    res.json({ \n      success: true, \n      data: { \n        ...result, \n        campaignId,\n        campaignName: campaignName || `Group Campaign ${campaignId}`,\n        groupsTargeted: groupIds.length,\n        contactsFound: uniqueContacts.length\n      } \n    });\n  } catch (error) {\n    logger.error('Error sending messages to groups:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\n// Get messaging queue status\nrouter.get('/queue', async (req, res) => {\n  try {\n    const whatsappService = req.app.locals.whatsappService;\n    const status = whatsappService.getStatus();\n    \n    res.json({ \n      success: true, \n      data: {\n        queueLength: status.queueLength,\n        isProcessing: status.isProcessingQueue,\n        stats: status.stats\n      }\n    });\n  } catch (error) {\n    logger.error('Error getting queue status:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\n// Get WhatsApp chats\nrouter.get('/chats', async (req, res) => {\n  try {\n    const whatsappService = req.app.locals.whatsappService;\n    const chats = await whatsappService.getChats();\n    \n    res.json({ success: true, data: chats });\n  } catch (error) {\n    logger.error('Error getting chats:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\n// Logout from WhatsApp\nrouter.post('/logout', async (req, res) => {\n  try {\n    const whatsappService = req.app.locals.whatsappService;\n    await whatsappService.logout();\n    \n    res.json({ success: true, message: 'Logged out successfully' });\n  } catch (error) {\n    logger.error('Error logging out:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\n// Restart WhatsApp client\nrouter.post('/restart', async (req, res) => {\n  try {\n    const whatsappService = req.app.locals.whatsappService;\n    await whatsappService.destroy();\n    await whatsappService.initialize();\n    \n    res.json({ success: true, message: 'WhatsApp client restarted successfully' });\n  } catch (error) {\n    logger.error('Error restarting WhatsApp client:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\n// Test message (for development)\nrouter.post('/test', async (req, res) => {\n  try {\n    const { phoneNumber } = req.body;\n    const whatsappService = req.app.locals.whatsappService;\n\n    if (!phoneNumber) {\n      return res.status(400).json({ \n        success: false, \n        error: 'Phone number is required' \n      });\n    }\n\n    const testMessage = `ðŸ¤– Test message from WhatsApp Enhanced Messaging\\nTimestamp: ${new Date().toLocaleString()}\\n\\nThis is a test message to verify connectivity.`;\n    \n    const result = await whatsappService.sendMessage(phoneNumber, testMessage);\n    \n    res.json({ success: true, data: result });\n  } catch (error) {\n    logger.error('Error sending test message:', error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\nmodule.exports = router;