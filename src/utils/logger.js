const winston = require('winston');\nconst path = require('path');\nconst fs = require('fs');\nconst config = require('../config/config');\n\n// Create logs directory if it doesn't exist\nconst logsDir = config.logging.file.path;\nif (!fs.existsSync(logsDir)) {\n  fs.mkdirSync(logsDir, { recursive: true });\n}\n\n// Custom format for console output\nconst consoleFormat = winston.format.combine(\n  winston.format.colorize(),\n  winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\n  winston.format.printf(({ timestamp, level, message, ...meta }) => {\n    let msg = `${timestamp} [${level}]: ${message}`;\n    if (Object.keys(meta).length > 0) {\n      msg += ` ${JSON.stringify(meta)}`;\n    }\n    return msg;\n  })\n);\n\n// Custom format for file output\nconst fileFormat = winston.format.combine(\n  winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\n  winston.format.errors({ stack: true }),\n  winston.format.json()\n);\n\n// Create transports array\nconst transports = [\n  new winston.transports.Console({\n    format: consoleFormat,\n    level: config.logging.level\n  })\n];\n\n// Add file transports if enabled\nif (config.logging.file.enabled) {\n  transports.push(\n    new winston.transports.File({\n      filename: path.join(logsDir, 'error.log'),\n      level: 'error',\n      format: fileFormat,\n      maxsize: config.logging.file.maxSize,\n      maxFiles: config.logging.file.maxFiles\n    }),\n    new winston.transports.File({\n      filename: path.join(logsDir, 'combined.log'),\n      format: fileFormat,\n      maxsize: config.logging.file.maxSize,\n      maxFiles: config.logging.file.maxFiles\n    })\n  );\n}\n\n// Create logger instance\nconst logger = winston.createLogger({\n  level: config.logging.level,\n  format: fileFormat,\n  transports,\n  exitOnError: false\n});\n\n// Handle uncaught exceptions and unhandled rejections\nlogger.exceptions.handle(\n  new winston.transports.File({ \n    filename: path.join(logsDir, 'exceptions.log'),\n    format: fileFormat\n  })\n);\n\nlogger.rejections.handle(\n  new winston.transports.File({ \n    filename: path.join(logsDir, 'rejections.log'),\n    format: fileFormat\n  })\n);\n\nmodule.exports = logger;