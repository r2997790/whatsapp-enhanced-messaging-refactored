/**\n * Utility functions for the application\n */\n\n/**\n * Sleep function for delays\n * @param {number} ms - Milliseconds to sleep\n */\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Sanitize phone number to international format\n * @param {string} phoneNumber - Phone number to sanitize\n * @returns {string} - Sanitized phone number\n */\nfunction sanitizePhoneNumber(phoneNumber) {\n  if (!phoneNumber) return '';\n  \n  // Remove all non-digit characters\n  let cleaned = phoneNumber.replace(/\\D/g, '');\n  \n  // Add country code if missing (assuming +1 for US/Canada if not provided)\n  if (cleaned.length === 10) {\n    cleaned = '1' + cleaned;\n  }\n  \n  // Remove leading 0 if present\n  if (cleaned.startsWith('0')) {\n    cleaned = cleaned.substring(1);\n  }\n  \n  return cleaned;\n}\n\n/**\n * Generate unique ID\n * @returns {string} - Unique identifier\n */\nfunction generateId() {\n  return Date.now().toString(36) + Math.random().toString(36).substr(2);\n}\n\n/**\n * Validate email address\n * @param {string} email - Email to validate\n * @returns {boolean} - Whether email is valid\n */\nfunction isValidEmail(email) {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\n/**\n * Validate phone number\n * @param {string} phoneNumber - Phone number to validate\n * @returns {boolean} - Whether phone number is valid\n */\nfunction isValidPhoneNumber(phoneNumber) {\n  const cleaned = sanitizePhoneNumber(phoneNumber);\n  return cleaned.length >= 10 && cleaned.length <= 15;\n}\n\n/**\n * Format phone number for display\n * @param {string} phoneNumber - Phone number to format\n * @returns {string} - Formatted phone number\n */\nfunction formatPhoneNumber(phoneNumber) {\n  const cleaned = sanitizePhoneNumber(phoneNumber);\n  \n  if (cleaned.length === 11 && cleaned.startsWith('1')) {\n    // US/Canada format: +1 (XXX) XXX-XXXX\n    return `+1 (${cleaned.substr(1, 3)}) ${cleaned.substr(4, 3)}-${cleaned.substr(7, 4)}`;\n  } else if (cleaned.length >= 10) {\n    // International format: +XX XXXXXXXXX\n    return `+${cleaned}`;\n  }\n  \n  return phoneNumber;\n}\n\n/**\n * Parse CSV content to array of objects\n * @param {string} csvContent - CSV content as string\n * @param {string} delimiter - CSV delimiter (default: ',')\n * @returns {Array} - Array of objects\n */\nfunction parseCSV(csvContent, delimiter = ',') {\n  const lines = csvContent.trim().split('\\n');\n  if (lines.length < 2) return [];\n  \n  const headers = lines[0].split(delimiter).map(h => h.trim());\n  const data = [];\n  \n  for (let i = 1; i < lines.length; i++) {\n    const values = lines[i].split(delimiter);\n    if (values.length === headers.length) {\n      const obj = {};\n      headers.forEach((header, index) => {\n        obj[header] = values[index]?.trim() || '';\n      });\n      data.push(obj);\n    }\n  }\n  \n  return data;\n}\n\n/**\n * Escape HTML characters\n * @param {string} text - Text to escape\n * @returns {string} - Escaped text\n */\nfunction escapeHtml(text) {\n  const map = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#039;'\n  };\n  return text.replace(/[&<>\"']/g, m => map[m]);\n}\n\n/**\n * Deep clone an object\n * @param {Object} obj - Object to clone\n * @returns {Object} - Cloned object\n */\nfunction deepClone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Truncate text to specified length\n * @param {string} text - Text to truncate\n * @param {number} maxLength - Maximum length\n * @returns {string} - Truncated text\n */\nfunction truncateText(text, maxLength = 100) {\n  if (!text || text.length <= maxLength) return text;\n  return text.substring(0, maxLength) + '...';\n}\n\n/**\n * Format date to readable string\n * @param {Date} date - Date to format\n * @returns {string} - Formatted date string\n */\nfunction formatDate(date) {\n  if (!(date instanceof Date)) {\n    date = new Date(date);\n  }\n  \n  return date.toLocaleString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n}\n\n/**\n * Calculate time difference in human readable format\n * @param {Date} date - Date to compare with now\n * @returns {string} - Human readable time difference\n */\nfunction timeAgo(date) {\n  if (!(date instanceof Date)) {\n    date = new Date(date);\n  }\n  \n  const now = new Date();\n  const diffMs = now - date;\n  const diffSecs = Math.floor(diffMs / 1000);\n  const diffMins = Math.floor(diffSecs / 60);\n  const diffHours = Math.floor(diffMins / 60);\n  const diffDays = Math.floor(diffHours / 24);\n  \n  if (diffSecs < 60) return 'just now';\n  if (diffMins < 60) return `${diffMins} minute${diffMins > 1 ? 's' : ''} ago`;\n  if (diffHours < 24) return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;\n  if (diffDays < 7) return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;\n  \n  return formatDate(date);\n}\n\n/**\n * Capitalize first letter of each word\n * @param {string} text - Text to capitalize\n * @returns {string} - Capitalized text\n */\nfunction capitalizeWords(text) {\n  if (!text) return '';\n  return text.replace(/\\w\\S*/g, txt => \n    txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n  );\n}\n\nmodule.exports = {\n  sleep,\n  sanitizePhoneNumber,\n  generateId,\n  isValidEmail,\n  isValidPhoneNumber,\n  formatPhoneNumber,\n  parseCSV,\n  escapeHtml,\n  deepClone,\n  truncateText,\n  formatDate,\n  timeAgo,\n  capitalizeWords\n};