// WhatsApp Enhanced Messaging - Frontend Application\nclass WhatsAppApp {\n    constructor() {\n        this.socket = null;\n        this.isConnected = false;\n        this.currentTab = 'messaging';\n        this.contacts = [];\n        this.templates = [];\n        this.stats = {\n            sent: 0,\n            failed: 0,\n            total: 0,\n            queue: 0\n        };\n        \n        this.init();\n    }\n\n    init() {\n        this.initSocket();\n        this.initEventListeners();\n        this.initTabs();\n        this.loadInitialData();\n    }\n\n    // Socket.IO Setup\n    initSocket() {\n        this.socket = io();\n        \n        // Connection events\n        this.socket.on('connect', () => {\n            console.log('Connected to server');\n            this.updateConnectionStatus('connected', 'Connected');\n        });\n\n        this.socket.on('disconnect', () => {\n            console.log('Disconnected from server');\n            this.updateConnectionStatus('disconnected', 'Disconnected');\n        });\n\n        // WhatsApp events\n        this.socket.on('qr_code', (data) => {\n            this.displayQRCode(data.qrCode);\n        });\n\n        this.socket.on('whatsapp_ready', (data) => {\n            this.onWhatsAppReady();\n            this.showToast('success', 'WhatsApp Connected', 'Successfully connected to WhatsApp!');\n        });\n\n        this.socket.on('whatsapp_disconnected', (data) => {\n            this.onWhatsAppDisconnected();\n            this.showToast('error', 'WhatsApp Disconnected', data.reason || 'Connection lost');\n        });\n\n        this.socket.on('whatsapp_status', (status) => {\n            this.updateWhatsAppStatus(status);\n        });\n\n        // Messaging events\n        this.socket.on('message_sent', (data) => {\n            this.stats.sent++;\n            this.updateStats();\n            this.updateProgress();\n        });\n\n        this.socket.on('message_failed', (data) => {\n            this.stats.failed++;\n            this.updateStats();\n            this.updateProgress();\n            console.error('Message failed:', data);\n        });\n\n        this.socket.on('messaging_stats', (stats) => {\n            this.stats = { ...this.stats, ...stats };\n            this.updateStats();\n        });\n\n        this.socket.on('bulk_message_started', (data) => {\n            this.stats.total = data.total;\n            this.stats.sent = 0;\n            this.stats.failed = 0;\n            this.showProgress(`Bulk Campaign Started`, `0 / ${data.total}`);\n            this.showToast('info', 'Campaign Started', `Sending messages to ${data.total} contacts`);\n        });\n\n        this.socket.on('queue_completed', (stats) => {\n            this.hideProgress();\n            this.showToast('success', 'Campaign Completed', \n                `Sent: ${stats.sent}, Failed: ${stats.failed}`);\n        });\n    }\n\n    // Event Listeners\n    initEventListeners() {\n        // Single message form\n        document.getElementById('singleMessageForm').addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.sendSingleMessage();\n        });\n\n        // Bulk message form\n        document.getElementById('bulkMessageForm').addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.sendBulkMessage();\n        });\n\n        // Logout button\n        document.getElementById('logoutBtn').addEventListener('click', () => {\n            this.logout();\n        });\n\n        // Contact management\n        document.getElementById('addContactBtn').addEventListener('click', () => {\n            this.showAddContactModal();\n        });\n\n        document.getElementById('importContactsBtn').addEventListener('click', () => {\n            this.showImportModal();\n        });\n\n        document.getElementById('exportContactsBtn').addEventListener('click', () => {\n            this.exportContacts();\n        });\n\n        document.getElementById('refreshContactsBtn').addEventListener('click', () => {\n            this.loadContacts();\n        });\n\n        // Contact search\n        document.getElementById('contactSearch').addEventListener('input', (e) => {\n            this.searchContacts(e.target.value);\n        });\n\n        // Template management\n        document.getElementById('createTemplateBtn').addEventListener('click', () => {\n            this.showCreateTemplateModal();\n        });\n\n        // Template selection\n        document.getElementById('templateSelect').addEventListener('change', (e) => {\n            this.onTemplateSelect(e.target.value);\n        });\n\n        // Toast close\n        document.getElementById('toastClose').addEventListener('click', () => {\n            this.hideToast();\n        });\n\n        // File upload for CSV\n        document.getElementById('csvFile').addEventListener('change', (e) => {\n            if (e.target.files[0]) {\n                this.previewCSV(e.target.files[0]);\n            }\n        });\n    }\n\n    // Tab Management\n    initTabs() {\n        const tabButtons = document.querySelectorAll('.tab-button');\n        const tabContents = document.querySelectorAll('.tab-content');\n\n        tabButtons.forEach(button => {\n            button.addEventListener('click', () => {\n                const tabName = button.getAttribute('data-tab');\n                this.switchTab(tabName);\n            });\n        });\n    }\n\n    switchTab(tabName) {\n        // Update tab buttons\n        document.querySelectorAll('.tab-button').forEach(btn => {\n            btn.classList.remove('active');\n        });\n        document.querySelector(`[data-tab=\"${tabName}\"]`).classList.add('active');\n\n        // Update tab contents\n        document.querySelectorAll('.tab-content').forEach(content => {\n            content.classList.remove('active');\n        });\n        document.getElementById(tabName).classList.add('active');\n\n        this.currentTab = tabName;\n\n        // Load data for specific tabs\n        if (tabName === 'contacts') {\n            this.loadContacts();\n        } else if (tabName === 'templates') {\n            this.loadTemplates();\n        }\n    }\n\n    // WhatsApp Status Management\n    updateConnectionStatus(status, text) {\n        const statusElement = document.getElementById('connectionStatus');\n        const statusText = document.getElementById('statusText');\n        \n        statusElement.className = `w-3 h-3 rounded-full ${\n            status === 'connected' ? 'bg-green-500' : \n            status === 'connecting' ? 'bg-yellow-500' : 'bg-red-500'\n        }`;\n        statusText.textContent = text;\n    }\n\n    updateWhatsAppStatus(status) {\n        if (status.isConnected) {\n            this.onWhatsAppReady();\n        } else if (status.qrCode) {\n            this.displayQRCode(status.qrCode);\n        }\n        \n        this.stats.queue = status.queueLength || 0;\n        this.updateStats();\n    }\n\n    displayQRCode(qrCodeData) {\n        const container = document.getElementById('qrCodeContainer');\n        container.innerHTML = `<img src=\"${qrCodeData}\" alt=\"WhatsApp QR Code\" class=\"max-w-xs mx-auto\" />`;\n        \n        document.getElementById('qrSection').style.display = 'block';\n        document.getElementById('mainDashboard').style.display = 'none';\n    }\n\n    onWhatsAppReady() {\n        this.isConnected = true;\n        document.getElementById('qrSection').style.display = 'none';\n        document.getElementById('mainDashboard').style.display = 'block';\n        document.getElementById('logoutBtn').style.display = 'inline-flex';\n        \n        this.updateConnectionStatus('connected', 'WhatsApp Connected');\n        this.loadInitialData();\n    }\n\n    onWhatsAppDisconnected() {\n        this.isConnected = false;\n        document.getElementById('qrSection').style.display = 'block';\n        document.getElementById('mainDashboard').style.display = 'none';\n        document.getElementById('logoutBtn').style.display = 'none';\n        \n        this.updateConnectionStatus('disconnected', 'WhatsApp Disconnected');\n        \n        // Show reconnection message\n        const container = document.getElementById('qrCodeContainer');\n        container.innerHTML = `\n            <div class=\"text-gray-500\">\n                <i class=\"fas fa-exclamation-triangle text-6xl mb-4 text-yellow-500\"></i>\n                <p class=\"text-lg mb-2\">Connection Lost</p>\n                <p class=\"text-sm\">Attempting to reconnect...</p>\n            </div>\n        `;\n    }\n\n    // Stats Management\n    updateStats() {\n        document.getElementById('messagesSent').textContent = this.stats.sent || 0;\n        document.getElementById('messagesFailed').textContent = this.stats.failed || 0;\n        document.getElementById('messagesQueue').textContent = this.stats.queue || 0;\n        document.getElementById('totalContacts').textContent = this.contacts.length || 0;\n    }\n\n    // Progress Management\n    showProgress(title, text) {\n        document.getElementById('progressContainer').style.display = 'block';\n        document.getElementById('progressTitle').textContent = title;\n        document.getElementById('progressText').textContent = text;\n    }\n\n    updateProgress() {\n        const total = this.stats.total;\n        const completed = this.stats.sent + this.stats.failed;\n        \n        if (total > 0) {\n            const percentage = (completed / total) * 100;\n            document.getElementById('progressBar').style.width = `${percentage}%`;\n            document.getElementById('progressText').textContent = `${completed} / ${total}`;\n        }\n    }\n\n    hideProgress() {\n        setTimeout(() => {\n            document.getElementById('progressContainer').style.display = 'none';\n        }, 3000);\n    }\n\n    // Toast Notifications\n    showToast(type, title, message) {\n        const toast = document.getElementById('toast');\n        const icon = document.getElementById('toastIcon');\n        const titleElement = document.getElementById('toastTitle');\n        const messageElement = document.getElementById('toastMessage');\n\n        // Set icon and colors based on type\n        let iconClass = '';\n        let iconColor = '';\n        \n        switch (type) {\n            case 'success':\n                iconClass = 'fas fa-check-circle';\n                iconColor = 'text-green-500';\n                break;\n            case 'error':\n                iconClass = 'fas fa-exclamation-circle';\n                iconColor = 'text-red-500';\n                break;\n            case 'warning':\n                iconClass = 'fas fa-exclamation-triangle';\n                iconColor = 'text-yellow-500';\n                break;\n            case 'info':\n            default:\n                iconClass = 'fas fa-info-circle';\n                iconColor = 'text-blue-500';\n                break;\n        }\n\n        icon.innerHTML = `<i class=\"${iconClass} ${iconColor} text-xl\"></i>`;\n        titleElement.textContent = title;\n        messageElement.textContent = message;\n\n        // Show toast\n        toast.classList.remove('translate-x-full');\n        toast.classList.add('translate-x-0');\n\n        // Auto hide after 5 seconds\n        setTimeout(() => {\n            this.hideToast();\n        }, 5000);\n    }\n\n    hideToast() {\n        const toast = document.getElementById('toast');\n        toast.classList.remove('translate-x-0');\n        toast.classList.add('translate-x-full');\n    }\n\n    // Messaging Functions\n    async sendSingleMessage() {\n        const phone = document.getElementById('singlePhone').value.trim();\n        const message = document.getElementById('singleMessage').value.trim();\n\n        if (!phone || !message) {\n            this.showToast('error', 'Validation Error', 'Please fill in all fields');\n            return;\n        }\n\n        try {\n            const response = await fetch('/api/whatsapp/send-message', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ phoneNumber: phone, message })\n            });\n\n            const result = await response.json();\n\n            if (result.success) {\n                this.showToast('success', 'Message Sent', `Message sent to ${phone}`);\n                document.getElementById('singleMessageForm').reset();\n            } else {\n                this.showToast('error', 'Send Failed', result.error);\n            }\n        } catch (error) {\n            console.error('Error sending message:', error);\n            this.showToast('error', 'Network Error', 'Failed to send message');\n        }\n    }\n\n    async sendBulkMessage() {\n        const templateId = document.getElementById('templateSelect').value;\n        const message = document.getElementById('bulkMessage').value.trim();\n        const csvFile = document.getElementById('csvFile').files[0];\n\n        if (!templateId && !message) {\n            this.showToast('error', 'Validation Error', 'Please select a template or enter a custom message');\n            return;\n        }\n\n        if (!csvFile) {\n            this.showToast('error', 'Validation Error', 'Please select a CSV file');\n            return;\n        }\n\n        try {\n            // First upload and parse CSV\n            const formData = new FormData();\n            formData.append('file', csvFile);\n\n            const uploadResponse = await fetch('/api/upload/csv', {\n                method: 'POST',\n                body: formData\n            });\n\n            const uploadResult = await uploadResponse.json();\n\n            if (!uploadResult.success) {\n                this.showToast('error', 'CSV Error', uploadResult.error);\n                return;\n            }\n\n            const contacts = uploadResult.data.contacts;\n\n            if (contacts.length === 0) {\n                this.showToast('error', 'No Contacts', 'No valid contacts found in CSV file');\n                return;\n            }\n\n            // Send bulk message\n            const bulkData = {\n                contacts: contacts,\n                templateId: templateId || undefined,\n                message: message || undefined,\n                campaignName: `Campaign ${new Date().toLocaleDateString()}`\n            };\n\n            const bulkResponse = await fetch('/api/whatsapp/send-bulk', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(bulkData)\n            });\n\n            const bulkResult = await bulkResponse.json();\n\n            if (bulkResult.success) {\n                this.showToast('success', 'Campaign Started', `Bulk campaign started for ${contacts.length} contacts`);\n                document.getElementById('bulkMessageForm').reset();\n            } else {\n                this.showToast('error', 'Campaign Failed', bulkResult.error);\n            }\n        } catch (error) {\n            console.error('Error sending bulk message:', error);\n            this.showToast('error', 'Network Error', 'Failed to start bulk campaign');\n        }\n    }\n\n    // Contact Management\n    async loadContacts() {\n        try {\n            const response = await fetch('/api/contacts');\n            const result = await response.json();\n\n            if (result.success) {\n                this.contacts = result.data;\n                this.renderContacts(this.contacts);\n                this.updateStats();\n            }\n        } catch (error) {\n            console.error('Error loading contacts:', error);\n            this.showToast('error', 'Load Error', 'Failed to load contacts');\n        }\n    }\n\n    renderContacts(contacts) {\n        const tbody = document.getElementById('contactsTableBody');\n        \n        if (contacts.length === 0) {\n            tbody.innerHTML = `\n                <tr>\n                    <td colspan=\"5\" class=\"text-center py-8 text-gray-500\">\n                        <i class=\"fas fa-users text-4xl mb-2\"></i>\n                        <p>No contacts found</p>\n                    </td>\n                </tr>\n            `;\n            return;\n        }\n\n        tbody.innerHTML = contacts.map(contact => `\n            <tr class=\"hover:bg-gray-50\">\n                <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <div class=\"text-sm font-medium text-gray-900\">${contact.name}</div>\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <div class=\"text-sm text-gray-900\">${contact.phone}</div>\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <div class=\"text-sm text-gray-500\">${contact.email || '-'}</div>\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">\n                    <div class=\"flex flex-wrap gap-1\">\n                        ${contact.tags.map(tag => \n                            `<span class=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800\">${tag}</span>`\n                        ).join('')}\n                    </div>\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                    <button onclick=\"app.editContact('${contact.id}')\" class=\"text-indigo-600 hover:text-indigo-900 mr-3\">\n                        <i class=\"fas fa-edit\"></i>\n                    </button>\n                    <button onclick=\"app.deleteContact('${contact.id}')\" class=\"text-red-600 hover:text-red-900\">\n                        <i class=\"fas fa-trash\"></i>\n                    </button>\n                </td>\n            </tr>\n        `).join('');\n    }\n\n    searchContacts(query) {\n        if (!query) {\n            this.renderContacts(this.contacts);\n            return;\n        }\n\n        const filtered = this.contacts.filter(contact => \n            contact.name.toLowerCase().includes(query.toLowerCase()) ||\n            contact.phone.includes(query) ||\n            contact.email.toLowerCase().includes(query.toLowerCase())\n        );\n\n        this.renderContacts(filtered);\n    }\n\n    // Template Management\n    async loadTemplates() {\n        try {\n            const response = await fetch('/api/templates');\n            const result = await response.json();\n\n            if (result.success) {\n                this.templates = result.data;\n                this.renderTemplates(this.templates);\n                this.renderTemplateSelect(this.templates);\n            }\n        } catch (error) {\n            console.error('Error loading templates:', error);\n            this.showToast('error', 'Load Error', 'Failed to load templates');\n        }\n    }\n\n    renderTemplates(templates) {\n        const container = document.getElementById('templatesGrid');\n        \n        if (templates.length === 0) {\n            container.innerHTML = `\n                <div class=\"col-span-full text-center py-12 text-gray-500\">\n                    <i class=\"fas fa-file-text text-4xl mb-4\"></i>\n                    <p>No templates found</p>\n                </div>\n            `;\n            return;\n        }\n\n        container.innerHTML = templates.map(template => `\n            <div class=\"bg-white rounded-lg shadow p-6 hover:shadow-lg transition-shadow\">\n                <div class=\"flex justify-between items-start mb-3\">\n                    <h4 class=\"text-lg font-semibold text-gray-800\">${template.name}</h4>\n                    <div class=\"flex space-x-2\">\n                        <button onclick=\"app.editTemplate('${template.id}')\" class=\"text-blue-600 hover:text-blue-800\">\n                            <i class=\"fas fa-edit\"></i>\n                        </button>\n                        <button onclick=\"app.deleteTemplate('${template.id}')\" class=\"text-red-600 hover:text-red-800\">\n                            <i class=\"fas fa-trash\"></i>\n                        </button>\n                    </div>\n                </div>\n                <p class=\"text-sm text-gray-600 mb-3\">${template.content.substring(0, 150)}${template.content.length > 150 ? '...' : ''}</p>\n                <div class=\"flex justify-between items-center\">\n                    <span class=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800\">\n                        ${template.category}\n                    </span>\n                    <span class=\"text-xs text-gray-500\">\n                        Used ${template.usageCount || 0} times\n                    </span>\n                </div>\n                <div class=\"mt-3\">\n                    <button onclick=\"app.useTemplate('${template.id}')\" class=\"w-full bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded transition-colors\">\n                        Use Template\n                    </button>\n                </div>\n            </div>\n        `).join('');\n    }\n\n    renderTemplateSelect(templates) {\n        const select = document.getElementById('templateSelect');\n        select.innerHTML = '<option value=\"\">Select a template...</option>' + \n            templates.map(template => \n                `<option value=\"${template.id}\">${template.name}</option>`\n            ).join('');\n    }\n\n    // Initial Data Loading\n    async loadInitialData() {\n        await Promise.all([\n            this.loadContacts(),\n            this.loadTemplates()\n        ]);\n    }\n\n    // Logout\n    async logout() {\n        try {\n            const response = await fetch('/api/whatsapp/logout', {\n                method: 'POST'\n            });\n\n            const result = await response.json();\n\n            if (result.success) {\n                this.showToast('success', 'Logged Out', 'Successfully logged out of WhatsApp');\n            }\n        } catch (error) {\n            console.error('Error logging out:', error);\n            this.showToast('error', 'Logout Error', 'Failed to logout');\n        }\n    }\n\n    // Placeholder methods for modal functionality\n    showAddContactModal() {\n        this.showToast('info', 'Feature Coming Soon', 'Contact form modal will be implemented');\n    }\n\n    showImportModal() {\n        this.showToast('info', 'Feature Coming Soon', 'Import modal will be implemented');\n    }\n\n    showCreateTemplateModal() {\n        this.showToast('info', 'Feature Coming Soon', 'Template creation modal will be implemented');\n    }\n\n    editContact(id) {\n        console.log('Edit contact:', id);\n        this.showToast('info', 'Feature Coming Soon', 'Contact editing will be implemented');\n    }\n\n    deleteContact(id) {\n        console.log('Delete contact:', id);\n        this.showToast('info', 'Feature Coming Soon', 'Contact deletion will be implemented');\n    }\n\n    editTemplate(id) {\n        console.log('Edit template:', id);\n        this.showToast('info', 'Feature Coming Soon', 'Template editing will be implemented');\n    }\n\n    deleteTemplate(id) {\n        console.log('Delete template:', id);\n        this.showToast('info', 'Feature Coming Soon', 'Template deletion will be implemented');\n    }\n\n    useTemplate(id) {\n        document.getElementById('templateSelect').value = id;\n        this.onTemplateSelect(id);\n        this.switchTab('messaging');\n    }\n\n    async onTemplateSelect(templateId) {\n        if (!templateId) {\n            document.getElementById('bulkMessage').value = '';\n            return;\n        }\n\n        try {\n            const response = await fetch(`/api/templates/${templateId}`);\n            const result = await response.json();\n\n            if (result.success) {\n                document.getElementById('bulkMessage').value = result.data.content;\n            }\n        } catch (error) {\n            console.error('Error loading template:', error);\n        }\n    }\n\n    async exportContacts() {\n        try {\n            const response = await fetch('/api/contacts/export/csv');\n            \n            if (response.ok) {\n                const blob = await response.blob();\n                const url = window.URL.createObjectURL(blob);\n                const a = document.createElement('a');\n                a.href = url;\n                a.download = 'contacts.csv';\n                document.body.appendChild(a);\n                a.click();\n                window.URL.revokeObjectURL(url);\n                document.body.removeChild(a);\n                \n                this.showToast('success', 'Export Complete', 'Contacts exported successfully');\n            } else {\n                this.showToast('error', 'Export Failed', 'Failed to export contacts');\n            }\n        } catch (error) {\n            console.error('Error exporting contacts:', error);\n            this.showToast('error', 'Export Error', 'Failed to export contacts');\n        }\n    }\n\n    async previewCSV(file) {\n        // Simple CSV preview - just show file info for now\n        this.showToast('info', 'CSV Selected', `File: ${file.name} (${(file.size / 1024).toFixed(1)} KB)`);\n    }\n}\n\n// Initialize the application when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    window.app = new WhatsAppApp();\n});"